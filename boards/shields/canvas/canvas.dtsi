#include <dt-bindings/zmk/matrix_transform.h>

/ {
    model = "canvas";

    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    default_transform: keymap_transform0 {
        compatible = "zmk,matrix-transform";
        columns = <10>;
        rows = <3>;
        map =  <
            RC(0,0)  RC(0,1)  RC(0,2)  RC(0,3)  RC(0,4)  RC(0,5)  RC(0,6)  RC(0,7)  RC(0,8)  RC(0,9)
            RC(1,0)  RC(1,1)  RC(1,2)  RC(1,3)  RC(1,4)  RC(1,5)  RC(1,6)  RC(1,7)  RC(1,8)  RC(1,9)
                     RC(2,1)  RC(2,2)  RC(2,3)                    RC(2,6)  RC(2,7)  RC(2,8)
                                                RC(2,4)  RC(2,5)
        >;
    };

    kscan0: kscan0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        debounce-press-ms = <1>;
        debounce-release-ms = <5>;
        wakeup-source;
        row-gpios = <&xiao_d 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
                    <&xiao_d 9  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>,
                    <&xiao_d 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
    };

    haptic: haptic {
        compatible = "zmk,output-haptic-feedback";
        #binding-cells = <0>;
        driver = "drv2605";
        device = <&drv2605_0>;
    };
};

&pinctrl {
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 4)>,
                    <NRF_PSEL(TWIM_SCL, 0, 5)>;
        };
    };

    i2c0_sleep: i2c0_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 4)>,
                    <NRF_PSEL(TWIM_SCL, 0, 5)>;
            low-power-enable;
        };
    };
};

&xiao_i2c {
    status = "okay";
    compatible = "nordic,nrf-twim";

    drv2605_0: drv2605@5a {
        compatible = "ti,drv2605";
        reg = <0x5a>;
        library = <6>;  // LRA
        standby-ms = <1000>;
    };
};